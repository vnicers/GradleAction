// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        mavenLocal()
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        jcenter()
        maven { url "https://jitpack.io" }
    }
}

allprojects {
    group = 'com.vnicers'

    apply plugin: 'java'
    apply plugin: 'idea'

    idea {
        module {
            outputDir file('build/classes/java/main')
            testOutputDir file('build/classes/java/test')
        }
    }
    // ext.gradleScriptDir = "${rootProject.projectDir}/gradle"

    sourceSets {
        // Make the compileOnly dependencies available when compiling/running tests
        test.compileClasspath += configurations.compileOnly
        test.runtimeClasspath += configurations.compileOnly
    }

    compileJava {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
        options.encoding = 'UTF-8'
    }

    compileTestJava {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
        options.encoding = 'UTF-8'
        options.compilerArgs += "-parameters"
    }

    test {
        testLogging {
            // Show that tests are run in the command-line output
            events 'STARTED', 'PASSED', 'SKIPPED', 'FAILED', 'STANDARD_OUT', 'STANDARD_ERROR'
        }

        scanForTestClasses = false
        include(["**/*Tests.class", "**/*Test.class"])
        // Since we set scanForTestClasses to false, we need to filter out inner
        // classes with the "$" pattern; otherwise, using -Dtest.single=MyTests to
        // run MyTests by itself will fail if MyTests contains any inner classes.
        exclude(["**/Abstract*.class", '**/*$*'])
        reports.junitXml.setDestination(file("$buildDir/test-results"))
    }


    repositories {
        mavenLocal()
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        jcenter()
        maven { url "https://jitpack.io" }
    }

}

configure(subprojects- project(":build-src")) {
    dependencies {

        compile('org.apache.commons:commons-lang3:3.6')
        compile('ch.qos.logback:logback-classic:1.2.3')

        compileOnly('com.google.code.findbugs:jsr305:3.0.2')
        compileOnly('org.projectlombok:lombok:1.16.18')

        testCompile('junit:junit:4.12')
    }
}

configure(rootProject) {
    description = "moa"

    // don't publish the default jar for the root project
    configurations.archives.artifacts.clear()

    dependencies {  // for integration tests
        testCompile(project(":moa-admin"))
    }

    task wrapper(type: Wrapper) {
        description = "Generates gradlew[.bat] scripts"
        gradleVersion = '4.1'

        doLast() {
            def gradleOpts = "-XX:MaxMetaspaceSize=1024m -Xmx1024m"
            def gradleBatOpts = "$gradleOpts -XX:MaxHeapSize=256m"
            File wrapperFile = file("gradlew")
            wrapperFile.text = wrapperFile.text.replace("DEFAULT_JVM_OPTS=",
                    "GRADLE_OPTS=\"$gradleOpts \$GRADLE_OPTS\"\nDEFAULT_JVM_OPTS=")
            File wrapperBatFile = file("gradlew.bat")
            wrapperBatFile.text = wrapperBatFile.text.replace("set DEFAULT_JVM_OPTS=",
                    "set GRADLE_OPTS=$gradleBatOpts %GRADLE_OPTS%\nset DEFAULT_JVM_OPTS=")
        }
    }

}