import com.vnicers.build.gradle.ProjectVersion
import com.vnicers.build.gradle.ReleaseVersionTask

description = '管理控制台'

apply plugin: 'war'
apply plugin: 'org.akhikhl.gretty'


buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.akhikhl.gretty:gretty:+'
    }
}

dependencies {
   // compile fileTree(dir: "$webAppDir/WEB-INF/lib", include: ['*.jar'])
    runtime 'javax.servlet:javax.servlet-api:3.1.0'
}

gretty {
    httpPort = 9090
    contextPath = '/'

    // supported values:
    // 'jetty7', 'jetty8', 'jetty9', 'jetty93', 'jetty94', 'tomcat7', 'tomcat8'
    servletContainer = 'tomcat8'
}



ext.versionFile = file('version.properties')

task loadVersion {
    project.version = readVersion()
}

ProjectVersion readVersion() {
    logger.quiet('Reading the version.properties')
    if (!versionFile.exists()) {
        throw new GradleException("Required version file does not exits :$versionFile.canonicalPath")
    }

    Properties versionProps = new Properties()

    versionFile.withInputStream { stream ->
        versionProps.load(stream)
    }
    new ProjectVersion(versionProps.major.toInteger(),
            versionProps.minor.toInteger(), versionProps.release.toBoolean())
}


task printVersion {
    group 'version'

    doLast {
        logger.quiet "Version: $version"
    }
}

gradle.taskGraph.whenReady { TaskExecutionGraph taskGraph ->
    if (taskGraph.hasTask(release)) {
        if (!version.release) {
            version.release = true

            ant.propertyfile(file: versionFile) {
                entry(key: 'release', type: 'string', operation: '=', value: 'true')
            }
        }
    }
}

task createDistribution(type: Zip) {
    group 'version'

    from war.outputs.files
    from(sourceSets*.allSource) {
        into 'src'
    }

    from(projectDir) {
        include versionFile.name
    }
}

task backUpReleaseDistribution(type: Copy) {
    group 'version'

    from createDistribution.outputs.files
    into "$buildDir/backup"
}

task release(dependsOn: backUpReleaseDistribution) {
    group 'version'
    doLast {
        logger.quiet('Release the project...')
    }
}

tasks.addRule("Pattern: increment<Classifier>Version - Increment the project version classifier.") { taskName ->
    if (taskName.startsWith('increment') && taskName.endsWith('Version')) {
        task(taskName) {
            group 'version'
            doLast {
                String classifier = (taskName - 'increment' - 'Version').toLowerCase()
                String currentVersion = version.toString()

                switch (classifier) {
                    case 'major': ++version.major
                        break
                    case 'minor': ++version.minor
                        break
                    default:
                        throw new GradleException("Invalid version type '$classifier'. Allowed types :['Major','Minor']")
                }

                String newVersion = version.toString()

                logger.quiet "Incrementing $classifier project version : $currentVersion ->$newVersion"

                ant.propertyfile(file: versionFile) {
                    entry(key: classifier, type: 'int', operation: '+', value: 1)
                }

                logger.quiet "Current project version : $version"
            }
        }
    }
}